<!DOCTYPE html>
<html lang="en">
<%- include('./partials/head.ejs') %>
<body>
    <%- include('./partials/navbar.ejs') %>

    <div class="form-container">
        <h1 id="h1-search-update">Search & Update</h1>

        <form id="reagentForm-search-update" method="POST">
            <div class="div1-search-update">
                <div class="form-group-search-update">
                    <label for="casNumber">CAS Number:</label><br>
                    <input type="text" id="casNumber-register" name="casNumber" required>
                </div>

                <div class="form-group-search-update">
                    <label for="reagentName">Product Name:</label><br>
                    <input type="text" id="reagentName-register" name="reagentName" required>
                </div>

                <div class="form-group-search-update">
                    <label for="description">Description:</label><br>
                    <textarea id="description-register" name="description" rows="3" required></textarea>
                </div>

                <div class="form-group-search-update">
                    <label for="classe">Class:</label><br>
                    <input type="text" id="classe-register" name="classe" required>
                </div>

                <div class="form-group-search-update">
                    <label for="quantity">Quantity:</label><br>
                    <input type="number" id="quantity-register" name="quantity" min="1" required>
                </div>
            </div>

            <div class="div2-search-update">
                <div class="form-group-search-update">
                    <label for="brand">Brand:</label><br>
                    <input type="text" id="brand-register" name="brand" required>
                </div>

                <div class="form-group-search-update">
                    <label for="manufactureDate">Manufacture Date:</label><br>
                    <input type="date" id="manufactureDate-register" name="manufactureDate" required>
                </div>

                <div class="form-group-search-update">
                    <label for="expiryDate">Expiry Date:</label><br>
                    <input type="date" id="expiryDate-register" name="expiryDate" required>
                </div>

                <div class="form-group-search-update">
                    <label for="classification">Classification:</label><br>
                    <input type="text" id="classification-register" name="classification" required>
                </div>

                <div class="form-group-search-update">
                    <label for="local">Location:</label><br>
                    <input type="text" id="local-register" name="local" required>
                </div>
            </div>

            <div class="div3-search-update">
                <div class="form-group-search-update">
                    <label for="volume">Volume:</label><br>
                    <input type="text" id="volume-register" name="volume" required>
                </div>

                <div class="form-group-search-update">
                    <label for="weight">Weight:</label><br>
                    <input type="text" id="weight-register" name="weight" required>
                </div>

                <div class="form-group-search-update">
                    <label for="molecularFormula">Molecular Formula:</label><br>
                    <input type="text" id="molecularFormula-register" name="molecularFormula" required>
                </div>

                <div class="form-group-search-update">
                    <label for="molecularWeight_g_per_mol">Molecular Weight (g/mol):</label><br>
                    <input type="text" id="molecularWeight_g_per_mol-register" name="molecularWeight_g_per_mol" required>
                </div>

                <div class="form-group-search-update">
                    <label for="furtherInformations">Further Information:</label><br>
                    <textarea id="furtherInformations-register" name="furtherInformations" rows="3"></textarea>
                </div>
            </div>

            <div class="SUD-buttons">
                <button type="button" class="SUD-submit-button" id="searchButton">Search</button>
                <button type="button" class="SUD-submit-button" id="updateButton">Update</button>
                <button type="button" class="SUD-submit-button" id="deleteButton">Delete</button>
            </div>

            <div id="productDetails"></div>
        </form>
    </div>

    <%- include('./partials/footer.ejs') %>

    <script nonce = "<%= nonce %>">        
        document.addEventListener("DOMContentLoaded", async () => {

            const userId = "<%= user._id %>";            
            const form = document.getElementById("reagentForm-search-update");
            const searchButton = document.getElementById("searchButton");
            const updateButton = document.getElementById("updateButton");
            const deleteButton = document.getElementById("deleteButton");

            function formatDateToInputValue(isoString) {
                return isoString ? isoString.split("T")[0] : "";
            }

            function fillForm(data) {
                const reagent = data.reagent[0];
                if (!reagent) {
                    alert("Reagent not Found.");
                    return;
                }
            
                document.getElementById("reagentName-register").value = reagent.reagentName || "";
                document.getElementById("description-register").value = reagent.description || "";
                document.getElementById("classe-register").value = reagent.classe || "";
                document.getElementById("quantity-register").value = reagent.quantity || "";
                document.getElementById("brand-register").value = reagent.brand || "";
                document.getElementById("manufactureDate-register").value = formatDateToInputValue(reagent.manufactureDate);
                document.getElementById("expiryDate-register").value = formatDateToInputValue(reagent.expiryDate);
                document.getElementById("classification-register").value = reagent.classification || "";
                document.getElementById("local-register").value = reagent.local || "";
                document.getElementById("volume-register").value = reagent.volume || "";
                document.getElementById("weight-register").value = reagent.weight || "";
                document.getElementById("molecularFormula-register").value = reagent.molecularFormula || "";
                document.getElementById("molecularWeight_g_per_mol-register").value = reagent.molecularWeight_g_per_mol || "";
                document.getElementById("furtherInformations-register").value = reagent.furtherInformations || "";
            }
            
            searchButton.addEventListener("click", async (e) => {
                e.preventDefault();

                searchButton.disabled = true;

                const casNumber = document.getElementById("casNumber-register").value.trim();

                if (!casNumber) {
                    alert("Please enter a valid CAS Number");
                    form.reset();
                    return location.reload();
                    
                };

                try {                    
                    const csrfResponse = await fetch('/api/v1/token/csrf-token');
                    const csrfData = await csrfResponse.json();
                    const csrfToken = csrfData.csrf;

                    if (!csrfToken) return alert('CSRF token not found. Please reload the page.');

                    const response = await fetch(`/api/v1/reagents/${userId}/${casNumber}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrfToken
                        }
                    });

                    if(!response.ok) {
                        console.log('Fetch Error:', response);
                    };

                    console.log('response-fetch:', response);

                    const data = await response.json();  
                    console.log('data-response-fetch:', data);
                    console.log('data-reagent:', data.reagent, 'type:', typeof data.reagent);
                    console.log('data-message:', data.message);
                    
                    if (!data.reagent){
                        document.getElementById("productDetails").innerHTML = '<p style="color:red;">Reagent not Found</p>';
                        return form.reset();                    
                    };

                    const reagent = data.reagent[0];
                    console.log('reagent-object:', reagent, 'type:', typeof reagent);
                    console.log('reagent-quantity:', reagent.quantity);
                    console.log('reagent-local:', reagent.local);
                    
                    fillForm(data);
                        document.getElementById("productDetails").innerHTML = `
                            <h3 id="rendered-message">
                                <span id="span-message">${reagent.quantity}</span> unit(s) found at location:
                                <span id="span-message">${reagent.local}</span>
                            </h3>`;

                } catch (error) {
                    console.error("Error during search:", error);

                } finally{
                    searchButton.disabled = false;
                }
            });

            updateButton.addEventListener("click", async (e) => {
                e.preventDefault();

                updateButton.disabled = true;

                const casNumber = document.getElementById("casNumber-register").value.trim();

                if (!casNumber) {
                    alert("Please enter a valid CAS Number");
                    return;
                };

                const formData = {
                    casNumber: document.getElementById('casNumber-register').value.trim(),
                    reagentName: document.getElementById('reagentName-register').value.trim(),
                    description: document.getElementById('description-register').value.trim(),
                    classe: document.getElementById('classe-register').value.trim(),
                    quantity: parseInt(document.getElementById('quantity-register').value) || 1,
                    brand: document.getElementById('brand-register').value.trim(),
                    manufactureDate: document.getElementById('manufactureDate-register').value,
                    expiryDate: document.getElementById('expiryDate-register').value || null,
                    classification: document.getElementById('classification-register').value.trim(),
                    local: document.getElementById('local-register').value.trim(),
                    volume: document.getElementById('volume-register').value.trim(),
                    weight: document.getElementById('weight-register').value.trim(),
                    molecularFormula: document.getElementById('molecularFormula-register').value.trim(),
                    molecularWeight_g_per_mol: document.getElementById('molecularWeight_g_per_mol-register').value.trim(),
                    furtherInformations: document.getElementById('furtherInformations-register').value.trim()
                };

                try {

                    const csrfResponse = await fetch('/api/v1/token/csrf-token');
                    const csrfData = await csrfResponse.json();
                    const csrfToken = csrfData.csrf;

                    if (!csrfToken) return alert('CSRF token not found. Please reload the page.');
                    
                    const response = await fetch(`/api/v1/reagents/auth/${userId}/${casNumber}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrfToken
                        },
                        body: JSON.stringify(formData)
                    });

                    const result = await response.json();

                    if (!response.ok) throw new Error(result.error || 'Error while updating product');

                    alert('The product has been updated!');
                    form.reset();

                } catch (error) {
                    alert(error.message);
                    console.error("Error:", error);

                } finally {
                    updateButton.disabled = false;
                }
            });

            deleteButton.addEventListener("click", async (e) => {
                e.preventDefault();

                if (!confirm("Are you sure you want to delete this reagent?")) {
                    deleteButton.disabled = false;
                    return;
                }

                deleteButton.disabled = true;

                const casNumber = document.getElementById("casNumber-register").value.trim();

                if (!casNumber) {
                    alert("Please enter a valid CAS Number to delete");
                    return;
                }

                try {
                    const csrfResponse = await fetch('/api/v1/token/csrf-token');
                    const csrfData = await csrfResponse.json();
                    const csrfToken = csrfData.csrf;

                    if (!csrfToken) return alert('CSRF token not found. Please reload the page.');
                    
                    const response = await fetch(`/api/v1/reagents/auth/${userId}/${casNumber}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrfToken
                        }
                    });

                    const result = await response.json();
                    console.log('result-delete:', result, typeof result);
                    console.log('result-error-delete:', result.error, typeof result.error);
                    console.log('result-message-delete:', result.message, typeof result.message);

                    if (result.error) {
                        alert(result.error);
                    } else {
                        
                        alert(result.message);
                        form.reset();
                        return location.reload();
                    }
                } catch (error) {
                    console.error("Error deleting product:", error);
                    alert("Error deleting product");
                } finally {
                    deleteButton.disabled = false;
                }
            });
        });
    </script>
</body>
</html>
