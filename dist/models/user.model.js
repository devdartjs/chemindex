import mongoose from"mongoose";import emailVal from"validator";import bcrypt from"bcrypt";const{isEmail:isEmail}=emailVal,userSchema=mongoose.Schema({email:{type:String,required:[!0,"Please enter an email"],unique:!0,lowercase:!0,validate:[isEmail,"Please enter a valid email"]},password:{type:String,required:[!0,"Please enter a password"],minlength:[6,"Minimum password length is 6 characters"]},status:{type:String,enum:["user","user100","user250","user500","user750","user1000","userTest","admin"],default:"user"}});userSchema.index({status:1}),userSchema.pre("save",async function(e){const s=await bcrypt.genSalt();this.password=await bcrypt.hash(this.password,s),console.log("models-user-hookPre--Password was hashed:",this.password),e()}),userSchema.post("save",function(e,s){console.log("models-user-hookPost--An user was created:",e),s()}),userSchema.statics.login=async function(e,s){try{const r=await this.findOne({email:e});if(!r)throw new Error("incorrect email");if(await bcrypt.compare(s,r.password))return console.log("authorized"),r;throw new Error("incorrect password")}catch(e){throw console.log("models-login (4)",e),e}};const User=mongoose.model("user",userSchema);export default User;