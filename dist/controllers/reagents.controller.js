import Reagent from"../models/reagents.model.js";export const getReagents=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(401).json({message:"User not allowed."});const a=parseInt(e.query.page)||1,r=parseInt(e.query.limit)||10;if(isNaN(a)||isNaN(r))return s.status(400).json({message:"Page and limit must be valid numbers."});if(a<1||r<1)return s.status(400).json({message:"Invalid page or limit value. Must be greater than 0."});if(a>100||r>100)return s.status(400).json({message:"Page or limit value exceeds maximum of 100."});const n=(a-1)*r,o=await Reagent.countDocuments({createdBy:t}),u=Math.ceil(o/r),c=await Reagent.find({createdBy:t}).skip(n).limit(r).sort({createdAt:-1});return c&&0!==c.length?s.status(200).json({reagents:c,totalReagents:o,totalPages:u,currentPage:a}):s.status(404).json({message:"No reagents found on this page."})}catch(e){return s.status(500).json({message:"Server Error",err:e.message})}};export const getReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(400).json({message:"User not allowed"});const{casNumber:a}=e.params;if(!a)return s.status(400).json({message:"Invalid CAS-Number"});const r=await Reagent.find({casNumber:a.trim(),createdBy:t});return 0===r.length?s.status(400).json({message:"There is no reagent associated with this CAS-Number"}):s.status(200).json({reagent:r})}catch(e){return s.status(500).json({message:"Server Error",err:e.message})}};export const createReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(401).json({message:"User not allowed."});const a=await Reagent.find({userId:t,createdBy:t});if(!a)return s.status(400).json({message:"There is no reagents here!"});if(a.length>=16)return alert("To create more reagents, you need to update your account. Click ok and fill out the form"),s.redirect("wainting-list-form");const{casNumber:r,...n}=e.body;if(!r)return s.status(400).json({message:"Invalid casNumber"});if(await Reagent.findOne({casNumber:r.trim(),createdBy:t}))return s.status(400).json({message:"Reagent already exists!"});const o=await Reagent.create({...e.body,createdBy:t});return s.status(201).json({reagent:o})}catch(e){return s.status(500).json({message:"Server Error",err:e.message})}};export const updateReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(400).json({message:"User not allowed"});const{casNumber:a,...r}=e.body;if(!a||0===Object.keys(r).length)return s.status(400).json({message:"Invalid request format!: review your fields"});if(!await Reagent.findOne({casNumber:a.trim(),createdBy:t}))return s.status(404).json({error:"Product not found!"});const n=await Reagent.findOneAndUpdate({casNumber:a},{$set:{...r}},{new:!0});if(!n)return s.status(400).json({error:"No changes were made."});s.status(200).json({message:"Product updated successfully!",updatedProduct:n})}catch(e){s.status(500).json({error:"Internal server error",details:e.message})}};export const deleteReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(400).json({message:"User not allowed"});const{casNumber:a}=e.params;if(!a)return s.status(400).json({message:"invalid CAS-Number"});if(!await Reagent.findOneAndDelete({casNumber:a.trim(),createdBy:t}))return s.status(404).json({error:"Product not found or already deleted."});s.status(200).json({message:"Product deleted successfully!"})}catch(e){s.status(500).json({error:e.message})}};