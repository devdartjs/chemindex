import Reagent from"../models/reagents.model.js";export const getReagents=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(401).json({message:"User not allowed."});const r=parseInt(e.query.page)||1,a=parseInt(e.query.limit)||10;if(isNaN(r)||isNaN(a))return s.status(400).json({message:"Page and limit must be valid numbers."});if(r<1||a<1)return s.status(400).json({message:"Invalid page or limit value. Must be greater than 0."});if(r>100||a>100)return s.status(400).json({message:"Page or limit value exceeds maximum of 100."});const n=(r-1)*a,o=await Reagent.countDocuments({createdBy:t}),u=Math.ceil(o/a),c=await Reagent.find({createdBy:t}).skip(n).limit(a).sort({createdAt:-1});return c&&0!==c.length?s.status(200).json({reagents:c,totalReagents:o,totalPages:u,currentPage:r}):s.status(404).json({message:"No reagents found on this page."})}catch(e){return s.status(500).json({message:"Server Error",err:e.message})}};export const getReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(400).json({message:"User not allowed"});const{casNumber:r}=e.params;if(!r)return s.status(400).json({message:"Invalid CAS-Number"});const a=await Reagent.find({casNumber:r.trim(),createdBy:t});return 0===a.length?s.status(400).json({message:"There is no reagent associated with this CAS-Number"}):s.status(200).json({reagent:a})}catch(e){return s.status(500).json({message:"Server Error",err:e.message})}};export const createReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(401).json({message:"User not allowed."});const r=await Reagent.find({userId:t,createdBy:t});if(!r)return s.status(400).json({message:"There is no reagents here!"});if(console.log("reagents:",r.length),r.length>=16)return alert("To create more reagents, you need to update your account. Click ok and fill out the form"),s.redirect("wainting-list-form");const{casNumber:a,...n}=e.body;if(!a)return s.status(400).json({message:"Invalid casNumber"});console.log("userId-controller:",t,"casNumber:",a);if(await Reagent.findOne({casNumber:a.trim(),createdBy:t}))return s.status(400).json({message:"Reagent already exists!"});const o=await Reagent.create({...e.body,createdBy:t});return console.log("new Reagent:",o),s.status(201).json({reagent:o})}catch(e){return console.error("Error while creating reagent:",e.message),s.status(500).json({message:"Server Error",err:e.message})}};export const updateReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(400).json({message:"User not allowed"});const{casNumber:r,...a}=e.body;if(!r||0===Object.keys(a).length)return s.status(400).json({message:"Invalid request format!: review your fields"});if(!await Reagent.findOne({casNumber:r.trim(),createdBy:t}))return s.status(404).json({error:"Product not found!"});const n=await Reagent.findOneAndUpdate({casNumber:r},{$set:{...a}},{new:!0});if(!n)return s.status(400).json({error:"No changes were made."});s.status(200).json({message:"Product updated successfully!",updatedProduct:n})}catch(e){console.error("Error while updating product:",e),s.status(500).json({error:"Internal server error",details:e.message})}};export const deleteReagent=async(e,s)=>{try{const t=s.locals.user?._id;if(!t)return s.status(400).json({message:"User not allowed"});const{casNumber:r}=e.params;if(!r)return s.status(400).json({message:"invalid CAS-Number"});const a=await Reagent.findOneAndDelete({casNumber:r.trim(),createdBy:t});if(console.log("console-(2):",a),!a)return s.status(404).json({error:"Product not found or already deleted."});s.status(200).json({message:"Product deleted successfully!"})}catch(e){console.error("console-(error):",e),s.status(500).json({error:e.message})}};