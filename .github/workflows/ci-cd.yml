name: CI/CD - Chemindex

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build:gh
      - run: npm run prettier:check
      - run: npm run lint

  tests:
    name: Run Unit & Integration Tests in Docker
    runs-on: ubuntu-latest
    needs: build
    env:
      NODE_ENV: production
      PORT: 7000
      DB_URI: mongodb://mongo:27017/mongodb
      JWT_SECRET: secret
      JWT_EXPIRES_IN: 1000

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose (stage profile)
        run: docker compose --profile stage up --build -d

      - name: List containers
        run: docker ps

      - name: App logs
        run: docker logs chemindex-app-stage-1

      - name: Debug build folder
        run: docker compose run --rm app sh -c "ls -R /build/routes/admin"

      - name: Run tests (unit & integration)
        run: docker compose run --rm app npm run test

      - name: Tear down containers
        if: always()
        run: docker compose down --volumes --remove-orphans

  build-and-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create .env from the secret
        run: printf "%s\n" "${{ secrets.ENV }}" > .env

      - name: Extract version from package.json
        run: |
          VERSION=$(jq -r .version package.json)
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            ENV_FILE=.env
          push: true
          tags: |
            dartw/chemindex:latest
            dartw/chemindex:${{ env.VERSION }}

      - name: Cleanup .env
        run: rm -f .env

  deploy-to-stage:
    name: Deploy to Fly.io Stage
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --image dartw/chemindex:${{ env.VERSION || 'latest' }} --app chemindex-app --remote-only

      - name: Verify deployment
        run: |
          ATTEMPTS=0
          MAX_ATTEMPTS=15
          until curl -s -f https://chemindex-app.fly.dev/ > /dev/null 2>&1; do
            echo "Waiting for app to be healthy..."
            sleep 2
            ATTEMPTS=$((ATTEMPTS+1))
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "App did not become healthy in time."
              exit 1
            fi
          done
