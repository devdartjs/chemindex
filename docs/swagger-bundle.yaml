openapi: 3.0.0
info:
  title: API DOCUMENTATION
  version: 1.0.0
  description: 'This API handles user management, reagent tracking, and administrative operations for the Chemindex system.'
servers:
  - url: 'http://localhost:3000'
tags:
  - name: UsersRoutes
    description: Endpoints for user pages and session access
  - name: UsersAuthRoutes
    description: User login and registration endpoints
  - name: ReagentsRoutes
    description: Endpoints for managing reagents
  - name: ReagentsStateRoutes
    description: Endpoints for managing reagents state with authentication
  - name: AdminRoutes
    description: Endpoints for admin functionalities
  - name: ReagentsAdminRoutes
    description: Endpoints for managing reagents in admin context
  - name: UserAdminRoutes
    description: Endpoints for managing users in admin context
paths:
  /:
    get:
      summary: Home page
      tags:
        - UsersRoutes
      responses:
        '200':
          description: Successfully loaded the index page
  /login:
    get:
      summary: Login page
      tags:
        - UsersRoutes
      responses:
        '200':
          description: Successfully loaded the login page
  /sign-up:
    get:
      summary: Sign-up page
      tags:
        - UsersRoutes
      responses:
        '200':
          description: Successfully loaded the sign-up page
  /dashboard-reagents:
    get:
      summary: Dashboard with reagents (requires authentication)
      tags:
        - UsersRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully loaded dashboard
        '401':
          description: Unauthorized access
  /user-system:
    get:
      summary: User system page (requires authentication)
      tags:
        - UsersRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully loaded user system page
        '401':
          description: Unauthorized access
  /user-register-session:
    get:
      summary: User registration session page (requires authentication)
      tags:
        - UsersRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully loaded registration page
        '401':
          description: Unauthorized access
  /user-update-session:
    get:
      summary: User update session page (requires authentication)
      tags:
        - UsersRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully loaded update page
        '401':
          description: Unauthorized access
  /api/v1/users/auth/login:
    post:
      summary: User login
      tags:
        - UsersAuthRoutes
      requestBody:
        description: User credentials for login
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: strongPassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        '401':
          description: Invalid credentials
  /api/v1/users/auth/sign-up:
    post:
      summary: User sign-up
      tags:
        - UsersAuthRoutes
      requestBody:
        description: New user registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: StrongPassword123
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input data
  '/api/v1/reagents/{userId}':
    get:
      summary: Get all reagents
      tags:
        - ReagentsRoutes
      responses:
        '200':
          description: List of all reagents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    casNumber:
                      type: string
                      example: 64-17-5
                    name:
                      type: string
                      example: Ethanol
                    quantity:
                      type: number
                      example: 5
  '/api/v1/reagents/{userId}/{casNumber}':
    get:
      summary: Get reagent by CAS number
      tags:
        - ReagentsRoutes
      parameters:
        - in: path
          name: casNumber
          required: true
          schema:
            type: string
          description: CAS number of the reagent
      responses:
        '200':
          description: Reagent found
          content:
            application/json:
              schema:
                type: object
                properties:
                  casNumber:
                    type: string
                    example: 64-17-5
                  name:
                    type: string
                    example: Ethanol
                  quantity:
                    type: number
                    example: 5
        '404':
          description: Reagent not found
  '/api/v1/reagents/auth/{userId}':
    post:
      summary: Create a new reagent
      tags:
        - ReagentsStateRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID of the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - casNumber
                - name
                - quantity
              properties:
                casNumber:
                  type: string
                  example: 64-17-5
                name:
                  type: string
                  example: Ethanol
                quantity:
                  type: number
                  example: 5
      responses:
        '201':
          description: Reagent created successfully
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
  '/api/v1/reagents/auth/{userId}/{casNumber}':
    put:
      summary: Update an existing reagent by CAS number
      tags:
        - ReagentsStateRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: casNumber
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Ethanol
                quantity:
                  type: number
                  example: 10
      responses:
        '200':
          description: Reagent updated successfully
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Reagent not found
    delete:
      summary: Delete a reagent by CAS number
      tags:
        - ReagentsStateRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: casNumber
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reagent deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Reagent not found
  /api/v1/admin:
    get:
      summary: Access admin panel (requires admin permission)
      tags:
        - AdminRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin panel loaded successfully
          content:
            text/html:
              schema:
                type: string
                example: <!DOCTYPE html><html>...</html>
        '401':
          description: Unauthorized
        '403':
          description: Forbidden â€“ not an admin
  /api/v1/admin/login:
    post:
      summary: Admin login
      tags:
        - AdminRoutes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@example.com
                password:
                  type: string
                  format: password
                  example: AdminStrongPass123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        '401':
          description: Invalid credentials
  /api/v1/admin/reagents:
    get:
      summary: Get all reagents from all users
      tags:
        - AdminReagentsRoutes
      responses:
        '200':
          description: List of all reagents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                    casNumber:
                      type: string
                    name:
                      type: string
                    quantity:
                      type: number
  '/api/v1/admin/reagents/{userId}':
    get:
      summary: Get all reagents of a specific user
      tags:
        - AdminReagentsRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user reagents
        '404':
          description: User not found
    post:
      summary: Create a reagent for a specific user
      tags:
        - AdminReagentsRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - casNumber
                - name
                - quantity
              properties:
                casNumber:
                  type: string
                  example: 64-17-5
                name:
                  type: string
                  example: Ethanol
                quantity:
                  type: number
                  example: 5
      responses:
        '201':
          description: Reagent created
        '400':
          description: Invalid data
  '/api/v1/admin/reagents/{userId}/{casNumber}':
    get:
      summary: Get specific reagent of a user by CAS number
      tags:
        - AdminReagentsRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: casNumber
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reagent found
        '404':
          description: Reagent not found
    put:
      summary: Update a reagent for a user
      tags:
        - AdminReagentsRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: casNumber
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Ethanol
                quantity:
                  type: number
                  example: 10
      responses:
        '200':
          description: Reagent updated
        '400':
          description: Invalid input
        '404':
          description: Reagent not found
    delete:
      summary: Delete a reagent for a user
      tags:
        - AdminReagentsRoutes
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: casNumber
          required: true
          schema: string
  /api/v1/admin/users:
    get:
      summary: Get all registered users
      tags:
        - AdminUsersRoutes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: abc123
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: johndoe@example.com
    post:
      summary: Create a new user
      tags:
        - AdminUsersRoutes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: Jane Smith
                email:
                  type: string
                  format: email
                  example: janesmith@example.com
                password:
                  type: string
                  format: password
                  example: StrongPass123!
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input data
  '/api/v1/admin/users/{userId}':
    get:
      summary: Get a specific user by ID
      tags:
        - AdminUsersRoutes
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
        '404':
          description: User not found
    put:
      summary: Update user data
      tags:
        - AdminUsersRoutes
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Name
                email:
                  type: string
                  example: updated@example.com
                password:
                  type: string
                  example: NewPassword456
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid data
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      tags:
        - AdminUsersRoutes
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
