users:
  get:
    summary: Get all registered users
    tags:
      - AdminUsersRoutes
    security:
      - bearerAuth: []
    responses:
      200:
        description: List of all users
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "abc123"
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: johndoe@example.com

  post:
    summary: Create a new user
    tags:
      - AdminUsersRoutes
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                example: Jane Smith
              email:
                type: string
                format: email
                example: janesmith@example.com
              password:
                type: string
                format: password
                example: StrongPass123!
    responses:
      201:
        description: User created successfully
      400:
        description: Invalid input data

userId:
  get:
    summary: Get a specific user by ID
    tags:
      - AdminUsersRoutes
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    responses:
      200:
        description: User found
      404:
        description: User not found

  put:
    summary: Update user data
    tags:
      - AdminUsersRoutes
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Updated Name
              email:
                type: string
                example: updated@example.com
              password:
                type: string
                example: NewPassword456
    responses:
      200:
        description: User updated successfully
      400:
        description: Invalid data
      404:
        description: User not found

  delete:
    summary: Delete user by ID
    tags:
      - AdminUsersRoutes
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    responses:
      200:
        description: User deleted
      404:
        description: User not found
